/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ANOMALOUSCOUPLINGSPDF
#define ANOMALOUSCOUPLINGSPDF
#include "RooAbsPdf.h"
#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooRealVar.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TH3F.h"
#include "TH1.h"
#include "RooDataHist.h"
#include "RooHistFunc.h"
using namespace RooFit;


class AnomalousCouplings : public RooAbsPdf {
protected:
 
 RooRealProxy kd ;
 RooRealProxy fai ;
 RooListProxy _coefList ;  //  List of funcficients
 TIterator* _coefIter ;    //! Iterator over funcficient lis
 Double_t evaluate() const ;
public:
 AnomalousCouplings() {} ;
 AnomalousCouplings(const char *name, const char *title,
                      RooAbsReal& _kd,
                      RooAbsReal& _fai,
                      const RooArgList& inCoefList);
 
 AnomalousCouplings(const AnomalousCouplings& other, const char* name=0) ;
 virtual TObject* clone(const char* newname) const { return new AnomalousCouplings(*this,newname); }
 inline virtual ~AnomalousCouplings() {}
 
 Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
 Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;
 const RooArgList& coefList() const { return _coefList ; }
 
private:
 
 ClassDef(AnomalousCouplings,1) // Your description goes here...
};

#endif





